import React, { useEffect, useState } from 'react';
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';
import {
  faLock,
  faArrowTurnUp,
  faPenToSquare,
  faX,
  faCheck,
} from '@fortawesome/free-solid-svg-icons';
import axios from 'axios';
import formatDate from '../components/common/formatDate';

export default function Comment({
  postId,
  postSellerId,
  postSellerImg,
  postSellerName,
}) {
  const [comments, setComments] = useState([]);
  const [session, setSession] = useState([]);
  const [commentText, setCommentText] = useState('');
  const [replyText, setReplyText] = useState('');
  const [charCount, setCharCount] = useState(0);
  const [reCharCount, setReCharCount] = useState(0);
  const [isSecret, setIsSecret] = useState(false);
  const [activeReplyIndex, setActiveReplyIndex] = useState(null);
  const [isEditing, setIsEditing] = useState(null);
  const [editingCommentText, setEditingCommentText] = useState('');

  // ÎåìÍ∏Ä Î™©Î°ù Ï°∞Ìöå
  async function getCommentList() {
    try {
      const res = await axios.get(
        `http://localhost:8080/comments/list/${postId}`,
        {
          withCredentials: true,
        },
      );
      const { commentList } = res.data;
      const { session } = res.data;
      setComments(commentList);
      setSession(session);
      console.log('ÎåìÍ∏ÄÎ™©Î°ùÏ°∞Ìöå', res.data);
    } catch (error) {
      console.error('ÎåìÍ∏Ä Î™©Î°ùÏùÑ Í∞ÄÏ†∏Ïò§Îäî Îç∞ Ïã§Ìå®ÌñàÏäµÎãàÎã§:', error);
    }
  }
  const { nickname, profileImg, sellerId, userId } = session;

  // ÎåìÍ∏Ä Í∏ÄÏûêÏàò
  useEffect(() => {
    setCharCount(commentText.length);
    setReCharCount(replyText.length);
    if (commentText.length > 100) {
      setCommentText(commentText.slice(0, 100));
    }
    if (replyText.length > 100) {
      setReplyText(replyText.slice(0, 100));
    }
  }, [commentText, replyText]);

  const handleCommentChange = (e) => {
    setCommentText(e.target.value);
    setCharCount(e.target.value.length);
  };
  const handleReplyChange = (e) => {
    setReplyText(e.target.value);
    setCharCount(e.target.value.length);
  };

  // ÎåìÍ∏Ä Îì±Î°ù
  async function handleCommentSubmit() {
    try {
      const res = await axios.post(
        `http://localhost:8080/comments/${postId}`,
        {
          comContent: commentText,
          isSecret: isSecret,
        },
        {
          withCredentials: true,
        },
      );
      getCommentList();
      setCommentText('');
    } catch (error) {
      console.error('ÎåìÍ∏Ä Îì±Î°ùÏóê Ïã§Ìå®ÌñàÏäµÎãàÎã§:', error);
    }
  }

  // ÎåìÍ∏Ä ÏÇ≠Ï†ú
  async function handleDeleteComment(comId) {
    if (!confirm('Ï†ïÎßêÎ°ú Ïù¥ ÎåìÍ∏ÄÏùÑ ÏÇ≠Ï†úÌïòÏãúÍ≤†ÏäµÎãàÍπå?')) {
      return;
    }
    try {
      const res = await axios.patch(
        `http://localhost:8080/comments/delete/${comId}`,
      );
      console.log(res.data); //{deleteComm: 1, deleteReply: 1}

      getCommentList();
    } catch (error) {
      console.error('ÎåìÍ∏Ä ÏÇ≠Ï†ú Ïã§Ìå®:', error);
    }
  }

  const handleEditComment = (comId, currentContent) => {
    setEditingCommentText(currentContent);
    setIsEditing(comId);
  };

  // ÎåìÍ∏Ä ÏàòÏ†ï
  async function handleUpdateComment(comId) {
    try {
      const res = await axios.patch(
        `http://localhost:8080/comments/update/${comId}`,
        { comContent: editingCommentText, isSecret: isSecret },
        {
          withCredentials: true,
        },
      );
      console.log(res.data);
      getCommentList();
      setIsEditing(null);
      setEditingCommentText('');
    } catch (error) {
      console.error('ÎåìÍ∏Ä ÏàòÏ†ï Ïã§Ìå®:', error);
    }
  }

  // Enter ÌÇ§Î°ú ÎåìÍ∏Ä ÏàòÏ†ï ÏôÑÎ£å
  const handleKeyDown = (e, comId) => {
    if (e.key === 'Enter') {
      e.preventDefault(); // Í∏∞Î≥∏ Enter ÎèôÏûë(Ï§ÑÎ∞îÍøà) Î∞©ÏßÄ
      handleUpdateComment(comId); // ÎåìÍ∏Ä ÏàòÏ†ï API Ìò∏Ï∂ú
    }
  };

  // ÎπÑÎ∞Ä ÎåìÍ∏Ä ÌÜ†Í∏Ä
  const toggleSecret = () => {
    setIsSecret(!isSecret);
  };

  // userIdÍ∞Ä ÏûàÏùÑÎïåÎßå ÎåìÍ∏ÄÏóê Ï†ëÍ∑ºÍ∞ÄÎä•
  const userCheck = () => {
    if (!userId) {
      alert('Î°úÍ∑∏Ïù∏ ÌõÑ Ïù¥Ïö© Í∞ÄÎä•Ìï©ÎãàÎã§.');
      return;
    }
  };
  // ÌåêÎß§Ïûê ÏûêÏã†Ïù¥ ÏûëÏÑ±Ìïú Í∏ÄÏóêÏÑú ÏûëÏÑ±Ìïú ÎåìÍ∏ÄÏóêÏÑúÎäî ÌåêÎß§Ïûê Ï†ïÎ≥¥(Ïù¥Î¶Ñ, ÌîÑÎ°úÌïÑ ÏÇ¨ÏßÑ)Í∞Ä Î≥¥Ïó¨Ïïº ÌïúÎã§.
  // postSellerId === sellerId

  useEffect(() => {
    getCommentList();
  }, [postId]);

  return (
    <section className="comment-container">
      <h2>ÎåìÍ∏ÄÏì∞Í∏∞</h2>
      {/* ÎåìÍ∏ÄÎì±Î°ù */}
      <div className="comment-wrap" onMouseDown={userCheck}>
        <div className="user-wrap">
          <img
            src={
              postSellerId === sellerId
                ? postSellerImg
                : profileImg || '/img/duck.jpg'
            }
            className="user-img"
          />
          <h3 className="nickname">
            {postSellerId === sellerId ? postSellerName : nickname}
          </h3>
        </div>
        <div className="textarea-box">
          <textarea
            className="comment-text"
            placeholder={isSecret ? 'ÎπÑÎ∞ÄÎåìÍ∏Ä ÏûÖÎãàÎã§' : 'ÎåìÍ∏ÄÏùÑ ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî.'}
            value={commentText}
            onChange={handleCommentChange}
          />
          <span className="char-count">{charCount} / 100</span>
        </div>
        <div className="comment-btn-wrap">
          <label
            className={`lock-comment ${isSecret ? 'active' : ''}`}
            htmlFor="secret"
          >
            <FontAwesomeIcon icon={faLock} className="lock-icon" />
            <input
              type="checkbox"
              id="secret"
              checked={isSecret}
              onChange={toggleSecret}
            />
            ÎπÑÎ∞Ä ÎåìÍ∏Ä
          </label>
          <button className="comment-btn" onClick={handleCommentSubmit}>
            Îì±Î°ù
          </button>
        </div>
      </div>
      {/* ÎåìÍ∏Ä Îì±Î°ù ÏôÑÎ£å */}
      <div onMouseDown={userCheck}>
        <ul>
          {comments.map((comment, index) => (
            <li key={index}>
              <div className="comment-item">
                <div className="user-wrap">
                  <img
                    src={comment.User.profileImg || '/img/duck.jpg'}
                    className="user-img"
                  />
                  <h3 className="nickname">
                    {comment.User.nickname}
                    {comment.isSecret && (
                      <FontAwesomeIcon icon={faLock} className="lock-icon" />
                    )}
                  </h3>
                </div>
                <div className="text-box">
                  <textarea
                    className="comment-text"
                    value={
                      isEditing === comment.comId
                        ? editingCommentText // ÏàòÏ†ï Ï§ëÏù∏ ÎåìÍ∏ÄÏùò ÎÇ¥Ïö©ÏùÄ Î≥ÑÎèÑ ÏÉÅÌÉú ÏÇ¨Ïö©
                        : comment.isSecret && userId !== comment.User.userId
                          ? 'üîí ÎπÑÎ∞Ä ÎåìÍ∏ÄÏûÖÎãàÎã§' // ÎπÑÎ∞Ä ÎåìÍ∏ÄÏùº Í≤ΩÏö∞
                          : comment.comContent
                    }
                    onChange={(e) => setEditingCommentText(e.target.value)} // ÏàòÏ†ï Ï§ëÏù∏ ÎåìÍ∏ÄÏùò ÎÇ¥Ïö© Î≥ÄÍ≤Ω
                    readOnly={isEditing !== comment.comId} // ÏàòÏ†ï Ï§ëÏù∏ ÎåìÍ∏ÄÎßå ÏàòÏ†ï Í∞ÄÎä•ÌïòÍ≤å
                    onKeyDown={(e) => handleKeyDown(e, comment.comId)}
                  />
                  <time>{formatDate(comment.createdAt)}</time>
                </div>
                <div className="comment-complete-btn">
                  <button
                    className="reply-btn"
                    // onClick={() => handleInputReply(index, comment.comId)}
                  >
                    <FontAwesomeIcon
                      icon={faArrowTurnUp}
                      className="reply-icon"
                    />
                    ÎãµÍ∏Ä
                  </button>
                </div>
                {userId === comment.User.userId && (
                  <div className="comment-edit-wrap">
                    {isEditing === comment.comId ? (
                      <button
                        title="Ï†ÄÏû•"
                        className="comment-edit-icon"
                        onClick={() => handleUpdateComment(comment.comId)}
                      >
                        <FontAwesomeIcon icon={faCheck} />
                      </button>
                    ) : (
                      <>
                        <button
                          title="ÏàòÏ†ï"
                          onClick={() =>
                            handleEditComment(comment.comId, comment.comContent)
                          }
                        >
                          <FontAwesomeIcon
                            icon={faPenToSquare}
                            className="comment-edit-icon"
                          />
                        </button>
                        <button
                          title="ÏÇ≠Ï†ú"
                          onClick={() => {
                            handleDeleteComment(comment.comId);
                          }}
                        >
                          <FontAwesomeIcon
                            icon={faX}
                            className="comment-edit-icon"
                          />
                        </button>
                      </>
                    )}
                  </div>
                )}
              </div>
            </li>
          ))}
        </ul>
      </div>
    </section>
  );
}
